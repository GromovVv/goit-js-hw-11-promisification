{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","id","Math","floor","random","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAGjBA,EAFqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBrC,IAIQe,EAAkB,SAACC,GAEvB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAP6BC,EAAKC,EAO5BC,EAAKJ,EAAYI,GACjBzB,GARuBuB,EAQW,IARNC,EAQW,IAPxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IASlDnB,YAAW,WACUsB,KAAKE,SAAW,IAGjCzB,EAAQ,CAAEsB,KAAIzB,UAGdsB,EAAOG,KAERzB,OAKD6B,EAAa,SAAC,GAAsB,IAArBJ,EAAqB,EAArBA,GAAWnB,EAAU,EAAjBN,MACvBO,QAAQC,IAAR,eAA2BiB,EAA3B,iBAA8CnB,EAA9C,OAGIwB,EAAW,SAAAL,GACflB,QAAQwB,KAAR,gCAA6CN,EAA7C,8BAIFL,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.bdddf874586a1b202076.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user);\r\n      resolve(updatedUsers);\r\n    })\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  // toggleUserState(users, 'Mango', logger);\r\n  // toggleUserState(users, 'Lux', logger);\r\n\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const id = transaction.id;\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n    \r\n        if (canProcess) {\r\n          resolve({ id, delay });\r\n        } \r\n        \r\n          reject(id);\r\n        \r\n      }, delay);\r\n\r\n    })\r\n  };\r\n  \r\n  const logSuccess = ({id, delay: time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}